name: ie-bank-infra

on:
  workflow_dispatch:
  push:
      paths-ignore:
        - 'scripts/**'
  pull_request:
    branches: [ "main" ]

env:
  RESOURCE_GROUP_DEV: BCSAI2024-DEVOPS-STUDENTS-A-DEV
  RESOURCE_GROUP_UAT: BCSAI2024-DEVOPS-STUDENTS-A-UAT
  RESOURCE_GROUP_PROD: BCSAI2024-DEVOPS-STUDENTS-A-PROD
  SUBSCRIPTION_ID_DEV: e0b9cada-61bc-4b5a-bd7a-52c606726b3b
  USER_ALIAS: devopps-team

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run Bicep linter
        run: az bicep build --file ./main.bicep 

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'

    steps:
      - uses: actions/checkout@v2
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      # Run ARM template deployment with parameters
      - name: deploy
        uses: azure/arm-deploy@v2
        with:
          subscriptionId: ${{ env.SUBSCRIPTION_ID_DEV }}
          resourceGroupName: ${{ env.RESOURCE_GROUP_DEV }}
          template: ./main.bicep
          parameters: ./parameters/dev.bicepparam 
          #administratorLoginPassword=${{ secrets.DB_ADMIN_PASSWORD }}
          #frontendRepositoryUrl=https://github.com/DavidVart/ie-bank-fe-2024-final environmentType=nonprod # backendContainerAPIEnvVarDBPASS='${{ secrets.DBPASS }}' backendContainerAPIEnvVarDBUSER='${{ secrets.DBUSER }}' backendContainerAPIEnvVarDBHOST='${{ vars.DBHOST }}' backendContainerAPIEnvVarDBNAME='${{ vars.DBNAME }}' backendContainerAPIEnvVarENV='${{ vars.ENV }}' backendContainerAPIEnvVarFLASK_APP='${{ vars.FLASK_APP }}' backendContainerAPIEnvVarFLASK_DEBUG='${{ vars.FLASK_DEBUG }}'

          deploymentName: ${{ env.USER_ALIAS }}-dev
      
      # Unit Test: Validate Key Vault Deployment and Configuration
      - name: Test Key Vault Deployment
        id: test-vault
        run: |
          az keyvault show --name devopps-kv-dev --resource-group ${{ env.RESOURCE_GROUP_DEV }}
        continue-on-error: false

      # Validate Key Vault Properties
      - name: Verify Key Vault Properties
        run: |
          az keyvault show --name devopps-kv-dev --resource-group ${{ env.RESOURCE_GROUP_DEV }} \
            --query "{location: location, enabledForDeployment: properties.enabledForDeployment, enabledForTemplateDeployment: properties.enabledForTemplateDeployment, publicNetworkAccess: properties.publicNetworkAccess}" \
            --output json

      # Validate Key Vault Access Policies
      - name: Validate Key Vault Access Policies
        run: |
          az keyvault show --name devopps-kv-dev --resource-group ${{ env.RESOURCE_GROUP_DEV }} \
            --query "properties.accessPolicies[].{principalId: principalId, permissions: permissions}" \
            --output json

      # Validate RBAC Permissions
      - name: Validate Key Vault RBAC Permissions
        run: |
          az role assignment list \
            --scope /subscriptions/${{ env.SUBSCRIPTION_ID_DEV }}/resourceGroups/${{ env.RESOURCE_GROUP_DEV }}/providers/Microsoft.KeyVault/vaults/devopps-kv-dev \
            --query "[].{role: roleDefinitionName, principal: principalName}" \
            --output table
              

  deploy-uat:
    if: (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main') || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build, deploy-dev]
    environment:
      name: 'UAT'

    steps:
      - uses: actions/checkout@v2
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Run ARM template deployment with parameters
      - name: deploy
        uses: azure/arm-deploy@v2
        with:
          subscriptionId: ${{ env.SUBSCRIPTION_ID_DEV }}
          resourceGroupName: ${{ env.RESOURCE_GROUP_UAT }}
          template: ./main.bicep
          parameters: ./parameters/uat.bicepparam  # backendContainerAPIEnvVarDBPASS='${{ secrets.DBPASS }}' backendContainerAPIEnvVarDBUSER='${{ secrets.DBUSER }}' backendContainerAPIEnvVarDBHOST='${{ vars.DBHOST }}' backendContainerAPIEnvVarDBNAME='${{ vars.DBNAME }}' backendContainerAPIEnvVarVarENV='${{ vars.ENV }}' backendContainerAPIEnvVarFLASK_APP='${{ vars.FLASK_APP }}' backendContainerAPIEnvVarFLASK_DEBUG='${{ vars.FLASK_DEBUG }}'
          # frontendRepositoryUrl=https://github.com/DavidVart/ie-bank-fe-2024-final
          
          deploymentName: ${{ env.USER_ALIAS }}-uat

      # Unit Test: Validate Key Vault Deployment and Configuration
      - name: Test Key Vault Deployment
        id: test-vault
        run: |
          az keyvault show --name devopps-kv-uat --resource-group ${{ env.RESOURCE_GROUP_UAT }}
        continue-on-error: false

      # Validate Key Vault Properties
      - name: Verify Key Vault Properties
        run: |
          az keyvault show --name devopps-kv-uat --resource-group ${{ env.RESOURCE_GROUP_UAT }} \
            --query "{location: location, enabledForDeployment: properties.enabledForDeployment, enabledForTemplateDeployment: properties.enabledForTemplateDeployment, publicNetworkAccess: properties.publicNetworkAccess}" \
            --output json

      # Validate Key Vault Access Policies
      - name: Validate Key Vault Access Policies
        run: |
          az keyvault show --name devopps-kv-uat --resource-group ${{ env.RESOURCE_GROUP_UAT }} \
            --query "properties.accessPolicies[].{principalId: principalId, permissions: permissions}" \
            --output json

      # Validate RBAC Permissions
      - name: Validate Key Vault RBAC Permissions
        run: |
          az role assignment list \
            --scope /subscriptions/${{ env.SUBSCRIPTION_ID_DEV }}/resourceGroups/${{ env.RESOURCE_GROUP_UAT }}/providers/Microsoft.KeyVault/vaults/devopps-kv-uat \
            --query "[].{role: roleDefinitionName, principal: principalName}" \
            --output table

      # Ensure Diagnostic Settings Are Configured
      - name: Check Diagnostic Settings
        run: |
          az monitor diagnostic-settings list \
            --resource /subscriptions/${{ env.SUBSCRIPTION_ID_DEV }}/resourceGroups/${{ env.RESOURCE_GROUP_UAT }}/providers/Microsoft.KeyVault/vaults/devopps-kv-uat \
            --output json

      # Ensure Public Access is Disabled
      - name: Ensure Public Access is Disabled
        run: |
          az keyvault show --name devopps-kv-uat --resource-group ${{ env.RESOURCE_GROUP_UAT }} \
            --query "properties.publicNetworkAccess" \
            --output tsv | grep -q "Disabled" && echo "Public access is disabled" || (echo "Public access is not disabled"; exit 1)

      # Validate Specific Secrets (Optional)
      - name: Validate Specific Secret Exists
        run: |
          az keyvault secret show --vault-name devopps-kv-uat --name "example-secret" --query "id" --output tsv          
      
 
  