# name: ie-bank-infra

# on:
#   workflow_dispatch:
#   push:
#       paths-ignore:
#         - 'scripts/**'
#   pull_request:
#     branches: [ "main" ]

# env:
#   RESOURCE_GROUP_DEV: BCSAI2024-DEVOPS-STUDENTS-A-DEV
#   RESOURCE_GROUP_UAT: BCSAI2024-DEVOPS-STUDENTS-A-UAT
#   RESOURCE_GROUP_PROD: BCSAI2024-DEVOPS-STUDENTS-A-PROD
#   SUBSCRIPTION_ID_DEV: e0b9cada-61bc-4b5a-bd7a-52c606726b3b
#   USER_ALIAS: devopps-team

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - name: Run Bicep linter
#         run: az bicep build --file ./main.bicep

#   deploy-dev:
#     runs-on: ubuntu-latest
#     needs: build
#     environment:
#       name: "Development"
#       url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

#     steps:
#       # Log in to Azure
#       - name: Azure Login
#         uses: azure/login@v2
#         with:
#           creds: ${{ secrets.AZURE_CREDENTIALS }}

#       # Deploy backend to Azure Web App
#       - name: "Deploy to Azure Web App - Dev"
#         uses: azure/webapps-deploy@v3
#         id: deploy-to-webapp
#         with:
#           app-name: ${{ env.BACKEND_WEBAPP_DEV }} # Name of your Azure Web App for the backend
#           images: "${{ env.DOCKER_REGISTRY_SERVER_URL }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.image-version }}"


name: ie-bank-infra

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOCKER_REGISTRY_SERVER_URL: "${{ secrets.ACR_LOGIN_SERVER }}" # Automatically passed from the Docker Registry module output
  IMAGE_NAME: "backend-app" # Replace with your Docker image name
  BACKEND_WEBAPP_DEV: "my-backend-dev-app" # Replace with your Azure Web App for backend (Dev)
  BACKEND_WEBAPP_UAT: "my-backend-uat-app" # Replace with your Azure Web App for backend (UAT)

jobs:
  ### BUILD JOB ###
  build:
    runs-on: ubuntu-latest
    outputs:
      image-version: ${{ steps.image-version.outputs.version }}

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Python for dependencies, linting, and testing
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Upgrade pip and install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 3: Lint the code
      - name: Lint with flake8
        run: |
          pip install flake8 pytest
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # Step 4: Test the application with pytest
      - name: Test with pytest
        run: |
          python -m pytest --cov=iebank_api -v

      # Step 5: Set image version for Docker
      - name: Set image version
        id: image-version
        run: |
          echo "version=$(date +'%Y.%m.%d.%H.%M')" >> $GITHUB_OUTPUT

      # Step 6: Log in to Azure Container Registry
      - name: "Login to Docker Registry"
        uses: azure/docker-login@v2
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      # Step 7: Build and push Docker image
      - name: "Build and push image"
        run: |
          docker build . -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ steps.image-version.outputs.version }}
          docker build . -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ steps.image-version.outputs.version }}
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest

  ### DEPLOY DEV JOB ###
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: "Development"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      # Step 1: Log in to Azure
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step 2: Deploy to Azure Web App
      - name: "Deploy to Azure Web App - Dev"
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: ${{ env.BACKEND_WEBAPP_DEV }}
          images: "${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.image-version }}"

  ### DEPLOY UAT JOB ###
  deploy-uat:
    if: (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main') || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: "UAT"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      # Log in to Azure
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Deploy backend to Azure Web App
      - name: "Deploy to Azure Web App - UAT"
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: ${{ env.BACKEND_WEBAPP_UAT }}
          images: "${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.image-version }}"